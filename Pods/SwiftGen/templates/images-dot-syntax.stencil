// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if catalogs %}
#if os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIImage
  typealias Image = UIImage
#elseif os(OSX)
  import AppKit.NSImage
  typealias Image = NSImage
#endif

// swiftlint:disable file_length
// swiftlint:disable line_length
// swiftlint:disable nesting

struct {{enumName}}Type: StringLiteralConvertible {
  private var value: String

  var image: UIImage {
    return UIImage(asset: self)
  }

  public init(stringLiteral value: String) {
    self.value = value
  }

  public init(extendedGraphemeClusterLiteral value: String) {
    self.init(stringLiteral: value)
  }

  public init(unicodeScalarLiteral value: String) {
    self.init(stringLiteral: value)
  }
}
{% macro recursiveBlock images sp %}
{{sp}}  {% for image in images %}
{{sp}}  {% if not image.items %}
{{sp}}  static let {{image.name|swiftIdentifier|snakeToCamelCase}}: AssetType = "{{image.value}}"
{{sp}}  {% else %}
{{sp}}  enum {{image.name|swiftIdentifier|snakeToCamelCase}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call recursiveBlock image.items sp2 %}
{{sp}}  }
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{% endmacro %}

// swiftlint:disable type_body_length
enum {{enumName}} {
  {% if catalogs.count > 1 %}
  {% for catalog in catalogs %}
  enum {{catalog.name|swiftIdentifier|titlecase|snakeToCamelCase}} {
    {% call recursiveBlock catalog.assets "  " %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock catalogs.first.assets "" %}
  {% endif %}
}
// swiftlint:enable type_body_length

extension Image {
  convenience init!(asset: {{enumName}}Type) {
    self.init(named: asset.value)
  }
}
{% else %}
// No image found
{% endif %}
