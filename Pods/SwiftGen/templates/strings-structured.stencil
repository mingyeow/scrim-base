// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if structuredStrings %}
import Foundation

// swiftlint:disable file_length
// swiftlint:disable line_length

// swiftlint:disable type_body_length
// swiftlint:disable nesting

enum {{enumName}} {
{% macro enumBlock strings sp %}
{{sp}}  {% for string in strings.strings %}
{{sp}}  /// {{string.translation}}
{{sp}}  case {{string.keytail|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}{% if string.params %}({{string.params.types|join}}){% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% if strings.subenums %}
{{sp}}  {% for subenum in strings.subenums %}

{{sp}}  case {{subenum.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}({{subenum.name|swiftIdentifier|snakeToCamelCase}}{{enumName}})
{{sp}}  enum {{subenum.name|swiftIdentifier|snakeToCamelCase}}{{enumName}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call enumBlock subenum sp2 %}
{{sp}}  }
{{sp}}  {% endfor %}
{{sp}}  {% endif %}
{% endmacro %}
  {% call enumBlock structuredStrings sp %}
}

extension {{enumName}}: CustomStringConvertible {
{% macro extensionBlock strings sp keySuffix %}
{{sp}}  {% for string in strings.strings %}
{{sp}}  {% if string.params %}
{{sp}}  case .{{string.keytail|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}({{string.params.declarations|join}}):
{{sp}}    return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
{{sp}}  {% else %}
{{sp}}  case .{{string.keytail|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}:
{{sp}}    return {{enumName}}.tr("{{string.key}}")
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% if strings.subenums %}
{{sp}}  {% for subenum in strings.subenums %}
{{sp}}  {% set subkey %}levelSub{{keySuffix}}Key{{subenum.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}{% endset %}
{{sp}}  case .{{subenum.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}(let {{subkey}}):

{{sp}}    switch {{subkey}} {
{{sp}}    {% set sp2 %}{{sp}}    {% endset %}
{{sp}}    {% set keySuffix %}{{keySuffix}}Sub{% endset %}
{{sp}}    {% call extensionBlock subenum sp2 keySuffix %}
{{sp}}    }
{{sp}}  {% endfor %}
{{sp}}  {% endif %}
{% endmacro %}
  var description: String { return self.string }

  var string: String {
    switch self {
      {% call extensionBlock structuredStrings "    " keySuffix %}
    }
  }

  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let format = NSLocalizedString(key, comment: "")
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

// swiftlint:enable type_body_length
// swiftlint:enable nesting

func tr(key: {{enumName}}) -> String {
  return key.string
}
{% else %}
// No string found
{% endif %}
